package agenda.Core;

import java.net.URL;
import java.util.List;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ResourceBundle;
import javafx.scene.image.Image;
import java.util.Objects;

import agenda.dao.ContatoDAO;
import agenda.database.Database;
import agenda.database.DatabaseFactory;
import agenda.model.Contato;

import static agenda.Alert.Alerta.mostrarAlertaConfirmacao;
import static agenda.Alert.Alerta.mostrarAlertaErro;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.TableColumn;
import javafx.stage.Stage;

public class telaPrincipalController implements Initializable {
    // Cadastrar Contato
    @FXML
    private TextField edtNomeCompletoCadastro;
    @FXML
    private TextField edtDataDeNascimentoCadastro;
    @FXML
    private TextField edtNumeroDeTelefoneCadastro;
    @FXML
    private TextField edtEnderecoDeEmailCadastro;
    @FXML
    private TextField edtDescricaoCadastro;

    // Visualização do contato
    @FXML
    private TableView <Contato> tblSelecionar;
    @FXML
    private TableColumn <Contato, String> colunaNomeSelecionar;
    @FXML
    private TableColumn <Contato, String> colunaEmailSelecionar;
    @FXML
    private TextField edtNomeCompletoSelecionar;
    @FXML
    private TextField edtDataDeNascimentoSelecionar;
    @FXML
    private TextField edtNumeroDeTelefoneSelecionar;
    @FXML
    private TextField edtEnderecoDeEmailSelecionar;
    @FXML
    private TextField edtDescricaoSelecionar;

    // Atualização do contato
    @FXML
    private TableView <Contato> tblAtualizar;
    @FXML
    private TableColumn <Contato, String> colunaAtualizarNome;
    @FXML
    private TextField edtNomeCompletoAtualizar;
    @FXML
    private TextField edtDataDeNascimentoAtualizar;
    @FXML
    private TextField edtNumeroDeTelefoneAtualizar;
    @FXML
    private TextField edtEnderecoDeEmailAtualizar;
    @FXML
    private TextField edtDescricaoAtualizar;

    // Excluir do contato
    @FXML
    private TableView <Contato> tblExcluir;
    @FXML
    private TableColumn <Contato, String> colunaExcluirNome;
    @FXML
    private TableColumn <Contato, String> colunaExcluirNumeroDeTelefone;
    @FXML
    private TableColumn <Contato, String> colunaExcluirEmail;

    // Fazer Logout
    @FXML
    private Button btnVoltarTelaLogin;

    private final Database database = DatabaseFactory.getDatabase("postgresql");
    private final Connection connection = database != null ? database.conectar() : null;
    private ContatoDAO contatoDAO = null;

    {
        try {
            assert connection != null;
            contatoDAO = new ContatoDAO(connection);
        } catch (SQLException e) {
            mostrarAlertaErro("Error ", "Ocorreu uma falha durante a execução de uma instrução SQL.", e.toString());
        }
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        carregarTableViewContatos();

        tblSelecionar.getSelectionModel().selectedItemProperty().addListener(
                (observable, oldValue, newValue) -> selecionarItemTblSelecionar(newValue)
        );
        tblAtualizar.getSelectionModel().selectedItemProperty().addListener(
                (observable, oldValue, newValue) -> selecionarItemTblAtualizar(newValue)
        );
    }

    public void carregarTableViewContatos(){
        colunaNomeSelecionar.setCellValueFactory(new PropertyValueFactory<>("nome"));
        colunaEmailSelecionar.setCellValueFactory(new PropertyValueFactory<>("email"));
        colunaAtualizarNome.setCellValueFactory(new PropertyValueFactory<>("nome"));
        colunaExcluirNome.setCellValueFactory(new PropertyValueFactory<>("nome"));
        colunaExcluirEmail.setCellValueFactory(new PropertyValueFactory<>("email"));
        colunaExcluirNumeroDeTelefone.setCellValueFactory(new PropertyValueFactory<>("Numero"));

        List<Contato> listaContatos = contatoDAO.listarContato();
        ObservableList<Contato> observableListContatos = FXCollections.observableArrayList(listaContatos);

        tblSelecionar.setItems(observableListContatos);
        tblAtualizar.setItems(observableListContatos);
        tblExcluir.setItems(observableListContatos);
    }

    public void selecionarItemTblSelecionar(Contato contato){
        if (contato != null) {
            edtNomeCompletoSelecionar.setText(contato.getNome());
            edtDataDeNascimentoSelecionar.setText(contato.getDataAniversario());
            edtNumeroDeTelefoneSelecionar.setText(String.valueOf(contato.getNumero()));
            edtEnderecoDeEmailSelecionar.setText(contato.getEmail());
            edtDescricaoSelecionar.setText(contato.getDescricao());
        } else {
            edtNomeCompletoSelecionar.setText("");
            edtDataDeNascimentoSelecionar.setText("");
            edtNumeroDeTelefoneSelecionar.setText("");
            edtEnderecoDeEmailSelecionar.setText("");
            edtDescricaoSelecionar.setText("");
        }
    }

    public void selecionarItemTblAtualizar(Contato contato){
        if (contato != null) {
            edtNomeCompletoAtualizar.setText(contato.getNome());
            edtDataDeNascimentoAtualizar.setText(contato.getDataAniversario());
            edtNumeroDeTelefoneAtualizar.setText(String.valueOf(contato.getNumero()));
            edtEnderecoDeEmailAtualizar.setText(contato.getEmail());
            edtDescricaoAtualizar.setText(contato.getDescricao());
        } else {
            edtNomeCompletoAtualizar.setText("");
            edtDataDeNascimentoAtualizar.setText("");
            edtNumeroDeTelefoneAtualizar.setText("");
            edtEnderecoDeEmailAtualizar.setText("");
            edtDescricaoAtualizar.setText("");
        }
    }

    public void atualizarContato(){
        Contato contatoSelecionado = tblAtualizar.getSelectionModel().getSelectedItem();

        if (contatoSelecionado != null) {
            contatoSelecionado.setNome(edtNomeCompletoAtualizar.getText());
            contatoSelecionado.setNumero(Long.valueOf(edtNumeroDeTelefoneAtualizar.getText()));;
            contatoSelecionado.setDataAniversario((edtDataDeNascimentoAtualizar.getText()));
            contatoSelecionado.setEmail(edtEnderecoDeEmailAtualizar.getText());
            contatoSelecionado.setDescricao(edtDescricaoAtualizar.getText());

            if (mostrarAlertaConfirmacao("Confirmação", "Confirma a alteração do do contato " + contatoSelecionado.getNome() + " ?", "")) {
                if (contatoDAO.alterarContato(contatoSelecionado)) {
                    edtNomeCompletoAtualizar.setText("");
                    edtDataDeNascimentoAtualizar.setText("");
                    edtNumeroDeTelefoneAtualizar.setText("");
                    edtEnderecoDeEmailAtualizar.setText("");
                    edtDescricaoAtualizar.setText("");

                    carregarTableViewContatos();
                }
            } else {
                return;
            }
        }
    }

    public void excluirContato(){
        Contato contatoSelecionado = tblExcluir.getSelectionModel().getSelectedItem();

        if (contatoSelecionado != null) {
            if (mostrarAlertaConfirmacao("Confirmação", "Confirma a exclução do contato " + contatoSelecionado.getNome() + " ?", "")) {
                if (contatoDAO.deletarContato(contatoSelecionado)) {
                    carregarTableViewContatos();
                }
            } else {
                return;
            }
        }
    }

    public void incluirContato(){
        if (!edtNomeCompletoCadastro.getText().isEmpty() && !edtDataDeNascimentoCadastro.getText().isEmpty() && !edtNumeroDeTelefoneCadastro.getText().isEmpty() &&
            !edtEnderecoDeEmailCadastro.getText().isEmpty() && !edtDescricaoCadastro.getText().isEmpty()) {

            Contato contatoNovo = new Contato();

            contatoNovo.setNome(edtNomeCompletoCadastro.getText());
            contatoNovo.setDataAniversario(edtDataDeNascimentoCadastro.getText());
            contatoNovo.setNumero(Long.valueOf(edtNumeroDeTelefoneCadastro.getText()));
            contatoNovo.setEmail(edtEnderecoDeEmailCadastro.getText());
            contatoNovo.setDescricao(edtDescricaoCadastro.getText());

            if (mostrarAlertaConfirmacao("Confirmação", "Confirma a inclusão do contato " + contatoNovo.getNome() + " ?", "")) {
                if (contatoDAO.inserirContato(contatoNovo)) {
                    edtNomeCompletoCadastro.setText("");
                    edtDataDeNascimentoCadastro.setText("");
                    edtNumeroDeTelefoneCadastro.setText("");
                    edtEnderecoDeEmailCadastro.setText("");
                    edtDescricaoCadastro.setText("");

                    carregarTableViewContatos();
                }
            } else {
                return;
            }
        }
    }

    public void fazerLogout() throws IOException {
        Stage stagePrincipal = (Stage) btnVoltarTelaLogin.getScene().getWindow();
        stagePrincipal.close();

        Stage stageLogin = new Stage();
        FXMLLoader fxmlLoaderLogin = new FXMLLoader(getClass().getResource("login.fxml"));
        Scene scene = new Scene(fxmlLoaderLogin.load());
        Image imageIcone = new Image(Objects.requireNonNull(getClass().getResourceAsStream("/contact.png")));

        stageLogin.setResizable(false);
        stageLogin.getIcons().add(imageIcone);
        stageLogin.setTitle("Agenda de Contatos FX");
        stageLogin.setScene(scene);
        stageLogin.show();
    }

//    public static void adicionarMascaraTelefone(TextField textField) {
//        textField.setOnKeyTyped(event -> {
//            String textoAtual = textField.getText();
//            String caractereDigitado = event.getCharacter();
//
//            if (caractereDigitado.matches("[0-9]")) {
//                textoAtual += caractereDigitado;
//
//                if (textoAtual.length() == 1) {
//                    textoAtual = "(" + textoAtual;
//                } else if (textoAtual.length() == 3) {
//                    textoAtual += ") ";
//                } else if (textoAtual.length() == 9) {
//                    textoAtual += "-";
//                }
//
//                textField.setText(textoAtual);
//                event.consume();
//            } else {
//                event.consume();
//            }
//        });
//    }
}